<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/view/AgendaView.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/view/AgendaView.java" />
              <option name="originalContent" value="package view;&#10;&#10;import controller.AgendaController;&#10;import model.Contacto;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.*;&#10;import javafx.stage.Stage;&#10;import javafx.beans.property.SimpleStringProperty;&#10;&#10;import java.util.Objects;&#10;&#10;public class AgendaView {&#10;    private final AgendaController controller;&#10;    private final ObservableList&lt;Contacto&gt; contactosObs = FXCollections.observableArrayList();&#10;&#10;    public AgendaView(AgendaController controller) {&#10;        this.controller = controller;&#10;    }&#10;&#10;    public void mostrar(Stage primaryStage) {&#10;        primaryStage.setTitle(&quot;Sistema de Agenda&quot;);&#10;        primaryStage.setWidth(1000);&#10;        primaryStage.setHeight(650);&#10;&#10;        // Título principal&#10;        Label lblTitulo = new Label(&quot;Sistema de Agenda&quot;);&#10;        lblTitulo.setStyle(&quot;-fx-font-size: 26px; -fx-font-weight: bold; -fx-text-fill: #8C6E5D;&quot;);&#10;        lblTitulo.setPadding(new Insets(15, 0, 15, 0));&#10;&#10;        // Título para ingreso&#10;        Label lblFormulario = new Label(&quot;Ingresar Contacto&quot;);&#10;        lblFormulario.setStyle(&quot;-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #8C6E5D;&quot;);&#10;&#10;        // Campos de entrada&#10;        TextField txtNombre = new TextField();&#10;        txtNombre.setPromptText(&quot;Nombre&quot;);&#10;&#10;        TextField txtApellido = new TextField();&#10;        txtApellido.setPromptText(&quot;Apellido&quot;);&#10;&#10;        TextField txtTelefono = new TextField();&#10;        txtTelefono.setPromptText(&quot;Teléfono (7-15 dígitos)&quot;);&#10;&#10;        TextField txtEmail = new TextField();&#10;        txtEmail.setPromptText(&quot;Correo electrónico&quot;);&#10;&#10;        VBox camposBox = new VBox(10, lblFormulario, txtNombre, txtApellido, txtTelefono, txtEmail);&#10;        camposBox.setPadding(new Insets(10, 0, 20, 0));&#10;&#10;        // Botones (colores planos)&#10;        Button btnAgregar   = crearBoton(&quot;Añadir Contacto&quot;, &quot;#F2D0A7&quot;);&#10;//        Button btnListar    = crearBoton(&quot;Listar Contactos&quot;, &quot;#C3D7D8&quot;);&#10;        Button btnEliminar  = crearBoton(&quot;Eliminar Contacto&quot;, &quot;#F2CFC2&quot;);&#10;        Button btnModificar = crearBoton(&quot;Modificar Teléfono&quot;, &quot;#8C6E5D&quot;, &quot;#ffffff&quot;);&#10;        Button btnEspacios  = crearBoton(&quot;Espacios Libres&quot;, &quot;#C3D7D8&quot;);&#10;        Button btnLlena     = crearBoton(&quot;¿Agenda Llena?&quot;, &quot;#F2D0A7&quot;);&#10;&#10;        VBox botonesBox = new VBox(12, btnAgregar, btnEliminar, btnModificar, btnEspacios, btnLlena);&#10;//        VBox botonesBox = new VBox(12, btnAgregar, btnListar, btnEliminar, btnModificar, btnEspacios, btnLlena);&#10;&#10;        // Tabla de contactos&#10;        Label lblTabla = new Label(&quot;Lista de Contactos&quot;);&#10;        lblTabla.setStyle(&quot;-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #8C6E5D;&quot;);&#10;&#10;        TableView&lt;Contacto&gt; tablaContactos = new TableView&lt;&gt;(contactosObs);&#10;        tablaContactos.setPrefHeight(400);&#10;        tablaContactos.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);&#10;        tablaContactos.setStyle(&#10;                &quot;-fx-background-color: white;&quot; +&#10;                        &quot;-fx-border-radius: 12;&quot; +&#10;                        &quot;-fx-background-radius: 12;&quot; +&#10;                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.1), 8, 0, 0, 2);&quot;&#10;        );&#10;&#10;        TableColumn&lt;Contacto, String&gt; colNombre = new TableColumn&lt;&gt;(&quot;Nombre&quot;);&#10;        colNombre.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getNombre(), &quot;&quot;)));&#10;&#10;        TableColumn&lt;Contacto, String&gt; colApellido = new TableColumn&lt;&gt;(&quot;Apellido&quot;);&#10;        colApellido.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getApellido(), &quot;&quot;)));&#10;&#10;        TableColumn&lt;Contacto, String&gt; colTelefono = new TableColumn&lt;&gt;(&quot;Teléfono&quot;);&#10;        colTelefono.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getTelefono(), &quot;&quot;)));&#10;&#10;        TableColumn&lt;Contacto, String&gt; colEmail = new TableColumn&lt;&gt;(&quot;Email&quot;);&#10;        colEmail.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getEmail(), &quot;&quot;)));&#10;&#10;        tablaContactos.getColumns().addAll(colNombre, colApellido, colTelefono, colEmail);&#10;&#10;        VBox tablaBox = new VBox(10, lblTabla, tablaContactos);&#10;        tablaBox.setPadding(new Insets(20));&#10;&#10;        // Acciones&#10;        btnAgregar.setOnAction(e -&gt; {&#10;            String mensaje = controller.agregarContacto(&#10;                    txtNombre.getText(),&#10;                    txtApellido.getText(),&#10;                    txtTelefono.getText(),&#10;                    txtEmail.getText()&#10;            );&#10;            mostrarAlertaStyled(&quot;Resultado&quot;, mensaje);&#10;            txtNombre.clear(); txtApellido.clear(); txtTelefono.clear(); txtEmail.clear();&#10;            contactosObs.setAll(controller.getContactos());&#10;        });&#10;&#10;//        btnListar.setOnAction(e -&gt; contactosObs.setAll(controller.getContactos()));&#10;&#10;        btnEliminar.setOnAction(e -&gt; {&#10;            String mensaje = controller.eliminarContacto(txtNombre.getText(), txtApellido.getText());&#10;            mostrarAlertaStyled(&quot;Resultado&quot;, mensaje);&#10;            contactosObs.setAll(controller.getContactos());&#10;        });&#10;&#10;        btnModificar.setOnAction(e -&gt; {&#10;            String mensaje = controller.modificarTelefono(&#10;                    txtNombre.getText(),&#10;                    txtApellido.getText(),&#10;                    txtTelefono.getText()&#10;            );&#10;            mostrarAlertaStyled(&quot;Resultado&quot;, mensaje);&#10;            contactosObs.setAll(controller.getContactos());&#10;        });&#10;&#10;        btnEspacios.setOnAction(e -&gt; mostrarAlertaStyled(&quot;Espacios libres&quot;, &quot;Quedan &quot; + controller.espaciosLibres() + &quot; espacios.&quot;));&#10;&#10;        btnLlena.setOnAction(e -&gt; {&#10;            boolean llena = controller.agendaLlena();&#10;            mostrarAlertaStyled(&quot;Estado de Agenda&quot;, llena ? &quot;La agenda está llena&quot; : &quot;Aún hay espacio disponible&quot;);&#10;        });&#10;&#10;        // Panel izquierdo: campos + separador + botones&#10;        VBox form = new VBox(20, camposBox, new Separator(), botonesBox);&#10;        form.setPadding(new Insets(20));&#10;        form.setAlignment(Pos.TOP_LEFT);&#10;        form.setStyle(&quot;-fx-background-color: #F2EDE9; -fx-background-radius: 15; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.15), 8, 0, 0, 2);&quot;);&#10;&#10;        BorderPane root = new BorderPane();&#10;        root.setTop(lblTitulo);&#10;        BorderPane.setAlignment(lblTitulo, Pos.CENTER);&#10;        root.setLeft(form);&#10;        root.setCenter(tablaBox);&#10;        BorderPane.setMargin(form, new Insets(20));&#10;&#10;        root.setStyle(&quot;-fx-background-color: linear-gradient(to bottom right, #F2EDE9, #C3D7D8);&quot;);&#10;&#10;        Scene scene = new Scene(root);&#10;        // Cargar CSS (debe existir en resources/styles/style.css)&#10;        //try {&#10;         //   String css = Objects.requireNonNull(getClass().getResource(&quot;/styles/style.css&quot;)).toExternalForm();&#10;           // scene.getStylesheets().add(css);&#10;        //} catch (Exception ex) {&#10;            // si no encuentra CSS no es crítico; seguimos sin él&#10;         //   System.err.println(&quot;No se encontró style.css en /styles/style.css&quot;);&#10;        //}&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // Inicializar tabla&#10;        contactosObs.setAll(controller.getContactos());&#10;    }&#10;&#10;    private Button crearBoton(String texto, String colorFondo) {&#10;        return crearBoton(texto, colorFondo, &quot;#333333&quot;); // texto gris oscuro&#10;    }&#10;&#10;    private Button crearBoton(String texto, String colorFondo, String colorTexto) {&#10;        Button btn = new Button(texto);&#10;        btn.setStyle(&#10;                &quot;-fx-background-radius: 10; &quot; +&#10;                        &quot;-fx-background-color: &quot; + colorFondo + &quot;; &quot; +&#10;                        &quot;-fx-text-fill: &quot; + colorTexto + &quot;; &quot; +&#10;                        &quot;-fx-font-weight: bold; &quot; +&#10;                        &quot;-fx-font-size: 14px; &quot; +&#10;                        &quot;-fx-padding: 10 20;&quot;&#10;        );&#10;        btn.setMaxWidth(Double.MAX_VALUE);&#10;        return btn;&#10;    }&#10;&#10;    // Ventanas emergentes estilizadas: aplica el CSS del proyecto al DialogPane&#10;    private void mostrarAlertaStyled(String titulo, String mensaje) {&#10;        Alert alerta = new Alert(Alert.AlertType.INFORMATION);&#10;        alerta.setTitle(titulo);&#10;        alerta.setHeaderText(null);&#10;        alerta.setContentText(mensaje);&#10;&#10;        // aplicar css si está disponible en classpath&#10;        try {&#10;            String css = Objects.requireNonNull(getClass().getResource(&quot;/styles/style.css&quot;)).toExternalForm();&#10;            DialogPane dp = alerta.getDialogPane();&#10;            dp.getStylesheets().add(css);&#10;            dp.getStyleClass().add(&quot;custom-alert&quot;);&#10;        } catch (Exception ex) {&#10;            // no crítico&#10;        }&#10;&#10;        alerta.showAndWait();&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package view;&#10;&#10;import controller.AgendaController;&#10;import model.Contacto;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.*;&#10;import javafx.stage.Stage;&#10;import javafx.beans.property.SimpleStringProperty;&#10;&#10;import java.util.Objects;&#10;&#10;public class AgendaView {&#10;    private final AgendaController controller;&#10;    private final ObservableList&lt;Contacto&gt; contactosObs = FXCollections.observableArrayList();&#10;&#10;    public AgendaView(AgendaController controller) {&#10;        this.controller = controller;&#10;    }&#10;&#10;    public void mostrar(Stage primaryStage) {&#10;        primaryStage.setTitle(&quot;Sistema de Agenda&quot;);&#10;        primaryStage.setWidth(1000);&#10;        primaryStage.setHeight(650);&#10;&#10;        // Título principal&#10;        Label lblTitulo = new Label(&quot;Sistema de Agenda&quot;);&#10;        lblTitulo.setStyle(&quot;-fx-font-size: 26px; -fx-font-weight: bold; -fx-text-fill: #8C6E5D;&quot;);&#10;        lblTitulo.setPadding(new Insets(15, 0, 15, 0));&#10;&#10;        // Título para ingreso&#10;        Label lblFormulario = new Label(&quot;Ingresar Contacto&quot;);&#10;        lblFormulario.setStyle(&quot;-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #8C6E5D;&quot;);&#10;&#10;        // Campos de entrada&#10;        TextField txtNombre = new TextField();&#10;        txtNombre.setPromptText(&quot;Nombre&quot;);&#10;        Label lblErrorNombre = new Label(&quot;&quot;);&#10;        lblErrorNombre.setStyle(&quot;-fx-text-fill: red; -fx-font-size: 11px;&quot;);&#10;        &#10;        TextField txtApellido = new TextField();&#10;        txtApellido.setPromptText(&quot;Apellido&quot;);&#10;        Label lblErrorApellido = new Label(&quot;&quot;);&#10;        lblErrorApellido.setStyle(&quot;-fx-text-fill: red; -fx-font-size: 11px;&quot;);&#10;&#10;        TextField txtTelefono = new TextField();&#10;        txtTelefono.setPromptText(&quot;Teléfono (10 dígitos)&quot;);&#10;        Label lblErrorTelefono = new Label(&quot;&quot;);&#10;        lblErrorTelefono.setStyle(&quot;-fx-text-fill: red; -fx-font-size: 11px;&quot;);&#10;&#10;        TextField txtEmail = new TextField();&#10;        txtEmail.setPromptText(&quot;Correo electrónico&quot;);&#10;        Label lblErrorEmail = new Label(&quot;&quot;);&#10;        lblErrorEmail.setStyle(&quot;-fx-text-fill: red; -fx-font-size: 11px;&quot;);&#10;        &#10;        // Añadir listeners para validaciones en tiempo real&#10;        txtNombre.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            if (newValue == null || newValue.isEmpty()) {&#10;                lblErrorNombre.setText(&quot;El nombre no puede estar vacío&quot;);&#10;            } else if (!newValue.matches(&quot;[a-zA-ZáéíóúÁÉÍÓÚñÑ]+&quot;)) {&#10;                lblErrorNombre.setText(&quot;El nombre solo puede contener letras&quot;);&#10;            } else {&#10;                lblErrorNombre.setText(&quot;&quot;);&#10;            }&#10;        });&#10;        &#10;        txtApellido.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            if (newValue == null || newValue.isEmpty()) {&#10;                lblErrorApellido.setText(&quot;El apellido no puede estar vacío&quot;);&#10;            } else if (!newValue.matches(&quot;[a-zA-ZáéíóúÁÉÍÓÚñÑ]+&quot;)) {&#10;                lblErrorApellido.setText(&quot;El apellido solo puede contener letras&quot;);&#10;            } else {&#10;                lblErrorApellido.setText(&quot;&quot;);&#10;            }&#10;        });&#10;        &#10;        txtTelefono.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            if (newValue == null || newValue.isEmpty()) {&#10;                lblErrorTelefono.setText(&quot;El teléfono no puede estar vacío&quot;);&#10;            } else if (!newValue.matches(&quot;\\d+&quot;)) {&#10;                lblErrorTelefono.setText(&quot;El teléfono solo puede contener números&quot;);&#10;            } else if (newValue.length() != 10) {&#10;                lblErrorTelefono.setText(&quot;El teléfono debe tener exactamente 10 dígitos&quot;);&#10;            } else {&#10;                lblErrorTelefono.setText(&quot;&quot;);&#10;            }&#10;        });&#10;        &#10;        txtEmail.textProperty().addListener((observable, oldValue, newValue) -&gt; {&#10;            if (newValue == null || newValue.isEmpty()) {&#10;                lblErrorEmail.setText(&quot;El email no puede estar vacío&quot;);&#10;            } else if (!newValue.contains(&quot;@&quot;) || !newValue.contains(&quot;.&quot;)) {&#10;                lblErrorEmail.setText(&quot;El email debe contener '@' y '.'&quot;);&#10;            } else if (!newValue.matches(&quot;^[\\w._%+-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$&quot;)) {&#10;                lblErrorEmail.setText(&quot;Formato de email incorrecto&quot;);&#10;            } else {&#10;                lblErrorEmail.setText(&quot;&quot;);&#10;            }&#10;        });&#10;&#10;        VBox nombreBox = new VBox(3, txtNombre, lblErrorNombre);&#10;        VBox apellidoBox = new VBox(3, txtApellido, lblErrorApellido);&#10;        VBox telefonoBox = new VBox(3, txtTelefono, lblErrorTelefono);&#10;        VBox emailBox = new VBox(3, txtEmail, lblErrorEmail);&#10;        &#10;        VBox camposBox = new VBox(10, lblFormulario, nombreBox, apellidoBox, telefonoBox, emailBox);&#10;        camposBox.setPadding(new Insets(10, 0, 20, 0));&#10;&#10;        // Botones (colores planos)&#10;        Button btnAgregar   = crearBoton(&quot;Añadir Contacto&quot;, &quot;#F2D0A7&quot;);&#10;//        Button btnListar    = crearBoton(&quot;Listar Contactos&quot;, &quot;#C3D7D8&quot;);&#10;        Button btnEliminar  = crearBoton(&quot;Eliminar Contacto&quot;, &quot;#F2CFC2&quot;);&#10;        Button btnModificar = crearBoton(&quot;Modificar Teléfono&quot;, &quot;#8C6E5D&quot;, &quot;#ffffff&quot;);&#10;        Button btnEspacios  = crearBoton(&quot;Espacios Libres&quot;, &quot;#C3D7D8&quot;);&#10;        Button btnLlena     = crearBoton(&quot;¿Agenda Llena?&quot;, &quot;#F2D0A7&quot;);&#10;&#10;        VBox botonesBox = new VBox(12, btnAgregar, btnEliminar, btnModificar, btnEspacios, btnLlena);&#10;//        VBox botonesBox = new VBox(12, btnAgregar, btnListar, btnEliminar, btnModificar, btnEspacios, btnLlena);&#10;&#10;        // Tabla de contactos&#10;        Label lblTabla = new Label(&quot;Lista de Contactos&quot;);&#10;        lblTabla.setStyle(&quot;-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #8C6E5D;&quot;);&#10;&#10;        TableView&lt;Contacto&gt; tablaContactos = new TableView&lt;&gt;(contactosObs);&#10;        tablaContactos.setPrefHeight(400);&#10;        tablaContactos.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);&#10;        tablaContactos.setStyle(&#10;                &quot;-fx-background-color: white;&quot; +&#10;                        &quot;-fx-border-radius: 12;&quot; +&#10;                        &quot;-fx-background-radius: 12;&quot; +&#10;                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.1), 8, 0, 0, 2);&quot;&#10;        );&#10;&#10;        TableColumn&lt;Contacto, String&gt; colNombre = new TableColumn&lt;&gt;(&quot;Nombre&quot;);&#10;        colNombre.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getNombre(), &quot;&quot;)));&#10;&#10;        TableColumn&lt;Contacto, String&gt; colApellido = new TableColumn&lt;&gt;(&quot;Apellido&quot;);&#10;        colApellido.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getApellido(), &quot;&quot;)));&#10;&#10;        TableColumn&lt;Contacto, String&gt; colTelefono = new TableColumn&lt;&gt;(&quot;Teléfono&quot;);&#10;        colTelefono.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getTelefono(), &quot;&quot;)));&#10;&#10;        TableColumn&lt;Contacto, String&gt; colEmail = new TableColumn&lt;&gt;(&quot;Email&quot;);&#10;        colEmail.setCellValueFactory(data -&gt; new SimpleStringProperty(Objects.toString(data.getValue().getEmail(), &quot;&quot;)));&#10;&#10;        tablaContactos.getColumns().addAll(colNombre, colApellido, colTelefono, colEmail);&#10;&#10;        VBox tablaBox = new VBox(10, lblTabla, tablaContactos);&#10;        tablaBox.setPadding(new Insets(20));&#10;&#10;        // Acciones&#10;        btnAgregar.setOnAction(e -&gt; {&#10;            // Validar todos los campos antes de enviar&#10;            boolean hayErrores = false;&#10;            StringBuilder errores = new StringBuilder(&quot;Por favor corrige los siguientes errores:\n&quot;);&#10;            &#10;            // Validar nombre&#10;            if (txtNombre.getText() == null || txtNombre.getText().trim().isEmpty()) {&#10;                errores.append(&quot;- El nombre no puede estar vacío\n&quot;);&#10;                hayErrores = true;&#10;            } else if (!txtNombre.getText().matches(&quot;[a-zA-ZáéíóúÁÉÍÓÚñÑ]+&quot;)) {&#10;                errores.append(&quot;- El nombre solo puede contener letras\n&quot;);&#10;                hayErrores = true;&#10;            }&#10;            &#10;            // Validar apellido&#10;            if (txtApellido.getText() == null || txtApellido.getText().trim().isEmpty()) {&#10;                errores.append(&quot;- El apellido no puede estar vacío\n&quot;);&#10;                hayErrores = true;&#10;            } else if (!txtApellido.getText().matches(&quot;[a-zA-ZáéíóúÁÉÍÓÚñÑ]+&quot;)) {&#10;                errores.append(&quot;- El apellido solo puede contener letras\n&quot;);&#10;                hayErrores = true;&#10;            }&#10;            &#10;            // Validar teléfono&#10;            if (txtTelefono.getText() == null || txtTelefono.getText().trim().isEmpty()) {&#10;                errores.append(&quot;- El teléfono no puede estar vacío\n&quot;);&#10;                hayErrores = true;&#10;            } else if (!txtTelefono.getText().matches(&quot;\\d+&quot;)) {&#10;                errores.append(&quot;- El teléfono solo puede contener números\n&quot;);&#10;                hayErrores = true;&#10;            } else if (txtTelefono.getText().length() != 10) {&#10;                errores.append(&quot;- El teléfono debe tener exactamente 10 dígitos\n&quot;);&#10;                hayErrores = true;&#10;            }&#10;            &#10;            // Validar email&#10;            if (txtEmail.getText() == null || txtEmail.getText().trim().isEmpty()) {&#10;                errores.append(&quot;- El email no puede estar vacío\n&quot;);&#10;                hayErrores = true;&#10;            } else if (!txtEmail.getText().matches(&quot;^[\\w._%+-]+@[\\w.-]+\\.[a-zA-Z]{2,6}$&quot;)) {&#10;                errores.append(&quot;- El email no tiene un formato válido\n&quot;);&#10;                hayErrores = true;&#10;            }&#10;            &#10;            // Si hay errores, mostrar alerta y no continuar&#10;            if (hayErrores) {&#10;                mostrarAlertaStyled(&quot;Error de Validación&quot;, errores.toString());&#10;                return;&#10;            }&#10;            &#10;            // Si no hay errores, intentar agregar el contacto&#10;            try {&#10;                String mensaje = controller.agregarContacto(&#10;                        txtNombre.getText(),&#10;                        txtApellido.getText(),&#10;                        txtTelefono.getText(),&#10;                        txtEmail.getText()&#10;                );&#10;                mostrarAlertaStyled(&quot;Resultado&quot;, mensaje);&#10;                txtNombre.clear(); txtApellido.clear(); txtTelefono.clear(); txtEmail.clear();&#10;                contactosObs.setAll(controller.getContactos());&#10;            } catch (Exception ex) {&#10;                mostrarAlertaStyled(&quot;Error&quot;, &quot;Ha ocurrido un error: &quot; + ex.getMessage());&#10;            }&#10;        });&#10;&#10;//        btnListar.setOnAction(e -&gt; contactosObs.setAll(controller.getContactos()));&#10;&#10;        btnEliminar.setOnAction(e -&gt; {&#10;            String mensaje = controller.eliminarContacto(txtNombre.getText(), txtApellido.getText());&#10;            mostrarAlertaStyled(&quot;Resultado&quot;, mensaje);&#10;            contactosObs.setAll(controller.getContactos());&#10;        });&#10;&#10;        btnModificar.setOnAction(e -&gt; {&#10;            String mensaje = controller.modificarTelefono(&#10;                    txtNombre.getText(),&#10;                    txtApellido.getText(),&#10;                    txtTelefono.getText()&#10;            );&#10;            mostrarAlertaStyled(&quot;Resultado&quot;, mensaje);&#10;            contactosObs.setAll(controller.getContactos());&#10;        });&#10;&#10;        btnEspacios.setOnAction(e -&gt; mostrarAlertaStyled(&quot;Espacios libres&quot;, &quot;Quedan &quot; + controller.espaciosLibres() + &quot; espacios.&quot;));&#10;&#10;        btnLlena.setOnAction(e -&gt; {&#10;            boolean llena = controller.agendaLlena();&#10;            mostrarAlertaStyled(&quot;Estado de Agenda&quot;, llena ? &quot;La agenda está llena&quot; : &quot;Aún hay espacio disponible&quot;);&#10;        });&#10;&#10;        // Panel izquierdo: campos + separador + botones&#10;        VBox form = new VBox(20, camposBox, new Separator(), botonesBox);&#10;        form.setPadding(new Insets(20));&#10;        form.setAlignment(Pos.TOP_LEFT);&#10;        form.setStyle(&quot;-fx-background-color: #F2EDE9; -fx-background-radius: 15; -fx-effect: dropshadow(gaussian, rgba(0,0,0,0.15), 8, 0, 0, 2);&quot;);&#10;&#10;        BorderPane root = new BorderPane();&#10;        root.setTop(lblTitulo);&#10;        BorderPane.setAlignment(lblTitulo, Pos.CENTER);&#10;        root.setLeft(form);&#10;        root.setCenter(tablaBox);&#10;        BorderPane.setMargin(form, new Insets(20));&#10;&#10;        root.setStyle(&quot;-fx-background-color: linear-gradient(to bottom right, #F2EDE9, #C3D7D8);&quot;);&#10;&#10;        Scene scene = new Scene(root);&#10;        // Cargar CSS (debe existir en resources/styles/style.css)&#10;        //try {&#10;         //   String css = Objects.requireNonNull(getClass().getResource(&quot;/styles/style.css&quot;)).toExternalForm();&#10;           // scene.getStylesheets().add(css);&#10;        //} catch (Exception ex) {&#10;            // si no encuentra CSS no es crítico; seguimos sin él&#10;         //   System.err.println(&quot;No se encontró style.css en /styles/style.css&quot;);&#10;        //}&#10;        primaryStage.setScene(scene);&#10;        primaryStage.show();&#10;&#10;        // Inicializar tabla&#10;        contactosObs.setAll(controller.getContactos());&#10;    }&#10;&#10;    private Button crearBoton(String texto, String colorFondo) {&#10;        return crearBoton(texto, colorFondo, &quot;#333333&quot;); // texto gris oscuro&#10;    }&#10;&#10;    private Button crearBoton(String texto, String colorFondo, String colorTexto) {&#10;        Button btn = new Button(texto);&#10;        btn.setStyle(&#10;                &quot;-fx-background-radius: 10; &quot; +&#10;                        &quot;-fx-background-color: &quot; + colorFondo + &quot;; &quot; +&#10;                        &quot;-fx-text-fill: &quot; + colorTexto + &quot;; &quot; +&#10;                        &quot;-fx-font-weight: bold; &quot; +&#10;                        &quot;-fx-font-size: 14px; &quot; +&#10;                        &quot;-fx-padding: 10 20;&quot;&#10;        );&#10;        btn.setMaxWidth(Double.MAX_VALUE);&#10;        return btn;&#10;    }&#10;&#10;    // Ventanas emergentes estilizadas: aplica el CSS del proyecto al DialogPane&#10;    private void mostrarAlertaStyled(String titulo, String mensaje) {&#10;        Alert alerta = new Alert(Alert.AlertType.INFORMATION);&#10;        alerta.setTitle(titulo);&#10;        alerta.setHeaderText(null);&#10;        alerta.setContentText(mensaje);&#10;&#10;        // aplicar css si está disponible en classpath&#10;        try {&#10;            String css = Objects.requireNonNull(getClass().getResource(&quot;/styles/style.css&quot;)).toExternalForm();&#10;            DialogPane dp = alerta.getDialogPane();&#10;            dp.getStylesheets().add(css);&#10;            dp.getStyleClass().add(&quot;custom-alert&quot;);&#10;        } catch (Exception ex) {&#10;            // no crítico&#10;        }&#10;&#10;        alerta.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>